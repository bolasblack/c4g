// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react-new add spec files if user added proj-tool jest: file content: /hello/.babelrc.js 1`] = `
"const path = require('path')

module.exports = {
  plugins: [
    [
      // astroturf/css-loader not compatible with thread-loader, so we use babel plugin
      'astroturf/plugin',
      {
        tagName: 'css',
        extension: '.scss',
        writeFiles: true, // Writes css files to disk using the result of \`getFileName\`
        getFileName(hostFilePath, pluginsOptions) {
          const basepath = path.join(
            path.dirname(hostFilePath),
            path.basename(hostFilePath, path.extname(hostFilePath)),
          )
          const relativePath = path.relative(__dirname, basepath)
          return \`.astroturf/extracted_styles/\${relativePath}.scss\`
        },
      },
    ],
  ],
}
"
`;

exports[`react-new add spec files if user added proj-tool jest: file content: /hello/.eslintrc.json 1`] = `
"{
  \\"extends\\": [
    \\"./node_modules/@c4605/toolconfs/eslintrc.base\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.ts\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.prettier\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.react\\"
  ],
  \\"parserOptions\\": {
    \\"project\\": \\"./tsconfig.json\\"
  },
  \\"rules\\": {}
}"
`;

exports[`react-new add spec files if user added proj-tool jest: file content: /hello/.gitignore 1`] = `
"# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Editors
# vscode
.vscode
# intelj
.idea
# vim
*.swp
*~
# emacs
\\\\#*\\\\#
.\\\\#*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.*
.envrc
.envrc.*

# parcel-bundler cache (https://parceljs.org/)
.cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# rollup.js default build output
dist/

# Serverless directories
.serverless/

# Temporary folders
tmp/
temp/

# Misc
.DS_*
"
`;

exports[`react-new add spec files if user added proj-tool jest: file content: /hello/README.md 1`] = `
"# hello

## Usage

\`\`\`bash
yarn start # watch and serve code
yarn build # build code
\`\`\`
"
`;

exports[`react-new add spec files if user added proj-tool jest: file content: /hello/package.json 1`] = `
"{
  \\"name\\": \\"hello\\",
  \\"version\\": \\"0.1.0\\",
  \\"main\\": null,
  \\"author\\": \\"c4605 <bolasblack@gmail.com>\\",
  \\"license\\": \\"MIT\\",
  \\"scripts\\": {
    \\"start\\": \\"poi -r ts-node/register --parallel --serve ./src\\",
    \\"build\\": \\"poi -r ts-node/register --parallel ./src\\"
  },
  \\"devDependencies\\": {
    \\"prettier\\": \\"^1.0.0\\",
    \\"eslint\\": \\"^1.0.0\\",
    \\"eslint-config-prettier\\": \\"^1.0.0\\",
    \\"@typescript-eslint/parser\\": \\"^1.0.0\\",
    \\"@typescript-eslint/eslint-plugin\\": \\"^1.0.0\\",
    \\"typescript\\": \\"^1.0.0\\",
    \\"ts-node\\": \\"^1.0.0\\",
    \\"@types/node\\": \\"^1.0.0\\",
    \\"poi\\": \\"^1.0.0\\",
    \\"@types/poi\\": \\"^1.0.0\\",
    \\"@poi/plugin-typescript\\": \\"^1.0.0\\",
    \\"sass\\": \\"^1.0.0\\",
    \\"sass-loader\\": \\"^1.0.0\\",
    \\"react-hot-loader\\": \\"^1.0.0\\"
  },
  \\"dependencies\\": {
    \\"@c4605/toolconfs\\": \\"^1.0.0\\",
    \\"react\\": \\"^1.0.0\\",
    \\"@types/react\\": \\"^1.0.0\\",
    \\"react-dom\\": \\"^1.0.0\\",
    \\"@types/react-dom\\": \\"^1.0.0\\",
    \\"astroturf\\": \\"^1.0.0\\"
  },
  \\"prettier\\": \\"@c4605/toolconfs/prettierrc\\"
}"
`;

exports[`react-new add spec files if user added proj-tool jest: file content: /hello/poi.config.ts 1`] = `
"import { Config } from 'poi'

const config: Config = {
  entry: 'src/index.tsx',
  plugins: [
    {
      resolve: '@poi/plugin-typescript',
      options: {
        babel: true,
      },
    },
  ],
}

export default config
"
`;

exports[`react-new add spec files if user added proj-tool jest: file content: /hello/src/index.tsx 1`] = `
"import 'react-hot-loader'
import * as React from 'react'
import * as ReactDOM from 'react-dom'
import { css } from 'astroturf'

function renderApp() {
  ReactDOM.render(<h1>It works</h1>, document.getElementById('app')!)
}

renderApp()
;(module as any).hot.accept(renderApp)

css\`
  h1 {
    font-size: 32px;
  }
\`
"
`;

exports[`react-new add spec files if user added proj-tool jest: file content: /hello/tsconfig.json 1`] = `
"{
  \\"extends\\": \\"@c4605/toolconfs/tsconfig\\",
  \\"compilerOptions\\": {
    \\"jsx\\": \\"react\\"
  }
}"
`;

exports[`react-new add spec files if user added proj-tool jest: file structure 1`] = `
Array [
  "/hello/package.json",
  "/hello/.eslintrc.json",
  "/hello/.babelrc.js",
  "/hello/README.md",
  "/hello/poi.config.ts",
  "/hello/tsconfig.json",
  "/hello/.gitignore",
  "/hello/src/index.tsx",
]
`;

exports[`react-new add spec files if user added proj-tool jest: rule tasks 1`] = `
Array [
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
]
`;

exports[`react-new support \`author\` option: file content: /hello/.babelrc.js 1`] = `
"const path = require('path')

module.exports = {
  plugins: [
    [
      // astroturf/css-loader not compatible with thread-loader, so we use babel plugin
      'astroturf/plugin',
      {
        tagName: 'css',
        extension: '.scss',
        writeFiles: true, // Writes css files to disk using the result of \`getFileName\`
        getFileName(hostFilePath, pluginsOptions) {
          const basepath = path.join(
            path.dirname(hostFilePath),
            path.basename(hostFilePath, path.extname(hostFilePath)),
          )
          const relativePath = path.relative(__dirname, basepath)
          return \`.astroturf/extracted_styles/\${relativePath}.scss\`
        },
      },
    ],
  ],
}
"
`;

exports[`react-new support \`author\` option: file content: /hello/.eslintrc.json 1`] = `
"{
  \\"extends\\": [
    \\"./node_modules/@c4605/toolconfs/eslintrc.base\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.ts\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.prettier\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.react\\"
  ],
  \\"parserOptions\\": {
    \\"project\\": \\"./tsconfig.json\\"
  },
  \\"rules\\": {}
}"
`;

exports[`react-new support \`author\` option: file content: /hello/.gitignore 1`] = `
"# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Editors
# vscode
.vscode
# intelj
.idea
# vim
*.swp
*~
# emacs
\\\\#*\\\\#
.\\\\#*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.*
.envrc
.envrc.*

# parcel-bundler cache (https://parceljs.org/)
.cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# rollup.js default build output
dist/

# Serverless directories
.serverless/

# Temporary folders
tmp/
temp/

# Misc
.DS_*
"
`;

exports[`react-new support \`author\` option: file content: /hello/README.md 1`] = `
"# hello

## Usage

\`\`\`bash
yarn start # watch and serve code
yarn build # build code
\`\`\`
"
`;

exports[`react-new support \`author\` option: file content: /hello/package.json 1`] = `
"{
  \\"name\\": \\"hello\\",
  \\"version\\": \\"0.1.0\\",
  \\"main\\": null,
  \\"author\\": \\"c4605 <bolasblack@gmail.com>\\",
  \\"license\\": \\"MIT\\",
  \\"scripts\\": {
    \\"start\\": \\"poi -r ts-node/register --parallel --serve ./src\\",
    \\"build\\": \\"poi -r ts-node/register --parallel ./src\\"
  },
  \\"devDependencies\\": {
    \\"prettier\\": \\"^1.0.0\\",
    \\"eslint\\": \\"^1.0.0\\",
    \\"eslint-config-prettier\\": \\"^1.0.0\\",
    \\"@typescript-eslint/parser\\": \\"^1.0.0\\",
    \\"@typescript-eslint/eslint-plugin\\": \\"^1.0.0\\",
    \\"typescript\\": \\"^1.0.0\\",
    \\"ts-node\\": \\"^1.0.0\\",
    \\"@types/node\\": \\"^1.0.0\\",
    \\"poi\\": \\"^1.0.0\\",
    \\"@types/poi\\": \\"^1.0.0\\",
    \\"@poi/plugin-typescript\\": \\"^1.0.0\\",
    \\"sass\\": \\"^1.0.0\\",
    \\"sass-loader\\": \\"^1.0.0\\",
    \\"react-hot-loader\\": \\"^1.0.0\\"
  },
  \\"dependencies\\": {
    \\"@c4605/toolconfs\\": \\"^1.0.0\\",
    \\"react\\": \\"^1.0.0\\",
    \\"@types/react\\": \\"^1.0.0\\",
    \\"react-dom\\": \\"^1.0.0\\",
    \\"@types/react-dom\\": \\"^1.0.0\\",
    \\"astroturf\\": \\"^1.0.0\\"
  },
  \\"prettier\\": \\"@c4605/toolconfs/prettierrc\\"
}"
`;

exports[`react-new support \`author\` option: file content: /hello/poi.config.ts 1`] = `
"import { Config } from 'poi'

const config: Config = {
  entry: 'src/index.tsx',
  plugins: [
    {
      resolve: '@poi/plugin-typescript',
      options: {
        babel: true,
      },
    },
  ],
}

export default config
"
`;

exports[`react-new support \`author\` option: file content: /hello/src/index.tsx 1`] = `
"import 'react-hot-loader'
import * as React from 'react'
import * as ReactDOM from 'react-dom'
import { css } from 'astroturf'

function renderApp() {
  ReactDOM.render(<h1>It works</h1>, document.getElementById('app')!)
}

renderApp()
;(module as any).hot.accept(renderApp)

css\`
  h1 {
    font-size: 32px;
  }
\`
"
`;

exports[`react-new support \`author\` option: file content: /hello/tsconfig.json 1`] = `
"{
  \\"extends\\": \\"@c4605/toolconfs/tsconfig\\",
  \\"compilerOptions\\": {
    \\"jsx\\": \\"react\\"
  }
}"
`;

exports[`react-new support \`author\` option: file structure 1`] = `
Array [
  "/hello/package.json",
  "/hello/.eslintrc.json",
  "/hello/.babelrc.js",
  "/hello/README.md",
  "/hello/poi.config.ts",
  "/hello/tsconfig.json",
  "/hello/.gitignore",
  "/hello/src/index.tsx",
]
`;

exports[`react-new support \`author\` option: rule tasks 1`] = `
Array [
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
]
`;

exports[`react-new works: file content: /hello/.babelrc.js 1`] = `
"const path = require('path')

module.exports = {
  plugins: [
    [
      // astroturf/css-loader not compatible with thread-loader, so we use babel plugin
      'astroturf/plugin',
      {
        tagName: 'css',
        extension: '.scss',
        writeFiles: true, // Writes css files to disk using the result of \`getFileName\`
        getFileName(hostFilePath, pluginsOptions) {
          const basepath = path.join(
            path.dirname(hostFilePath),
            path.basename(hostFilePath, path.extname(hostFilePath)),
          )
          const relativePath = path.relative(__dirname, basepath)
          return \`.astroturf/extracted_styles/\${relativePath}.scss\`
        },
      },
    ],
  ],
}
"
`;

exports[`react-new works: file content: /hello/.eslintrc.json 1`] = `
"{
  \\"extends\\": [
    \\"./node_modules/@c4605/toolconfs/eslintrc.base\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.ts\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.prettier\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.react\\"
  ],
  \\"parserOptions\\": {
    \\"project\\": \\"./tsconfig.json\\"
  },
  \\"rules\\": {}
}"
`;

exports[`react-new works: file content: /hello/.gitignore 1`] = `
"# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Editors
# vscode
.vscode
# intelj
.idea
# vim
*.swp
*~
# emacs
\\\\#*\\\\#
.\\\\#*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.*
.envrc
.envrc.*

# parcel-bundler cache (https://parceljs.org/)
.cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# rollup.js default build output
dist/

# Serverless directories
.serverless/

# Temporary folders
tmp/
temp/

# Misc
.DS_*
"
`;

exports[`react-new works: file content: /hello/README.md 1`] = `
"# hello

## Usage

\`\`\`bash
yarn start # watch and serve code
yarn build # build code
\`\`\`
"
`;

exports[`react-new works: file content: /hello/package.json 1`] = `
"{
  \\"name\\": \\"hello\\",
  \\"version\\": \\"0.1.0\\",
  \\"main\\": null,
  \\"license\\": \\"MIT\\",
  \\"scripts\\": {
    \\"start\\": \\"poi -r ts-node/register --parallel --serve ./src\\",
    \\"build\\": \\"poi -r ts-node/register --parallel ./src\\"
  },
  \\"devDependencies\\": {
    \\"prettier\\": \\"^1.0.0\\",
    \\"eslint\\": \\"^1.0.0\\",
    \\"eslint-config-prettier\\": \\"^1.0.0\\",
    \\"@typescript-eslint/parser\\": \\"^1.0.0\\",
    \\"@typescript-eslint/eslint-plugin\\": \\"^1.0.0\\",
    \\"typescript\\": \\"^1.0.0\\",
    \\"ts-node\\": \\"^1.0.0\\",
    \\"@types/node\\": \\"^1.0.0\\",
    \\"poi\\": \\"^1.0.0\\",
    \\"@types/poi\\": \\"^1.0.0\\",
    \\"@poi/plugin-typescript\\": \\"^1.0.0\\",
    \\"sass\\": \\"^1.0.0\\",
    \\"sass-loader\\": \\"^1.0.0\\",
    \\"react-hot-loader\\": \\"^1.0.0\\"
  },
  \\"dependencies\\": {
    \\"@c4605/toolconfs\\": \\"^1.0.0\\",
    \\"react\\": \\"^1.0.0\\",
    \\"@types/react\\": \\"^1.0.0\\",
    \\"react-dom\\": \\"^1.0.0\\",
    \\"@types/react-dom\\": \\"^1.0.0\\",
    \\"astroturf\\": \\"^1.0.0\\"
  },
  \\"prettier\\": \\"@c4605/toolconfs/prettierrc\\"
}"
`;

exports[`react-new works: file content: /hello/poi.config.ts 1`] = `
"import { Config } from 'poi'

const config: Config = {
  entry: 'src/index.tsx',
  plugins: [
    {
      resolve: '@poi/plugin-typescript',
      options: {
        babel: true,
      },
    },
  ],
}

export default config
"
`;

exports[`react-new works: file content: /hello/src/index.tsx 1`] = `
"import 'react-hot-loader'
import * as React from 'react'
import * as ReactDOM from 'react-dom'
import { css } from 'astroturf'

function renderApp() {
  ReactDOM.render(<h1>It works</h1>, document.getElementById('app')!)
}

renderApp()
;(module as any).hot.accept(renderApp)

css\`
  h1 {
    font-size: 32px;
  }
\`
"
`;

exports[`react-new works: file content: /hello/tsconfig.json 1`] = `
"{
  \\"extends\\": \\"@c4605/toolconfs/tsconfig\\",
  \\"compilerOptions\\": {
    \\"jsx\\": \\"react\\"
  }
}"
`;

exports[`react-new works: file structure 1`] = `
Array [
  "/hello/package.json",
  "/hello/.eslintrc.json",
  "/hello/.babelrc.js",
  "/hello/README.md",
  "/hello/poi.config.ts",
  "/hello/tsconfig.json",
  "/hello/.gitignore",
  "/hello/src/index.tsx",
]
`;

exports[`react-new works: rule tasks 1`] = `
Array [
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
]
`;
