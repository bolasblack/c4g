// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`node-new add spec files if user added proj-tool jest: file content: /hello/.eslintrc.json 1`] = `
"{
  \\"extends\\": [
    \\"./node_modules/@c4605/toolconfs/eslintrc.base\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.ts\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.prettier\\"
  ],
  \\"parserOptions\\": {
    \\"project\\": \\"./tsconfig.json\\"
  },
  \\"rules\\": {}
}"
`;

exports[`node-new add spec files if user added proj-tool jest: file content: /hello/.gitignore 1`] = `
"# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Editors
# vscode
.vscode
# intelj
.idea
# vim
*.swp
*~
# emacs
\\\\#*\\\\#
.\\\\#*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.*
.envrc
.envrc.*

# parcel-bundler cache (https://parceljs.org/)
.cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# rollup.js default build output
dist/

# Serverless directories
.serverless/

# Temporary folders
tmp/
temp/

# Misc
.DS_*"
`;

exports[`node-new add spec files if user added proj-tool jest: file content: /hello/README.md 1`] = `
"# hello

## Usage

\`\`\`bash
yarn build # build code
yarn watch # build and watch code
\`\`\`
"
`;

exports[`node-new add spec files if user added proj-tool jest: file content: /hello/package.json 1`] = `
"{
  \\"name\\": \\"hello\\",
  \\"version\\": \\"0.1.0\\",
  \\"main\\": \\"lib/index.js\\",
  \\"author\\": \\"c4605 <bolasblack@gmail.com>\\",
  \\"license\\": \\"MIT\\",
  \\"scripts\\": {
    \\"prepublishOnly\\": \\"yarn build\\",
    \\"build\\": \\"tsc --build .\\",
    \\"watch\\": \\"tsc --watch -p .\\"
  },
  \\"devDependencies\\": {
    \\"prettier\\": \\"^1.0.0\\",
    \\"eslint\\": \\"^1.0.0\\",
    \\"eslint-config-prettier\\": \\"^1.0.0\\",
    \\"@typescript-eslint/parser\\": \\"^1.0.0\\",
    \\"@typescript-eslint/eslint-plugin\\": \\"^1.0.0\\",
    \\"typescript\\": \\"^1.0.0\\",
    \\"@types/node\\": \\"^1.0.0\\"
  },
  \\"dependencies\\": {
    \\"@c4605/toolconfs\\": \\"^1.0.0\\"
  },
  \\"prettier\\": \\"@c4605/toolconfs/prettierrc\\"
}"
`;

exports[`node-new add spec files if user added proj-tool jest: file content: /hello/src/index.spec.ts 1`] = `
"import { main } from './index'

describe('index', () => {
  describe('main', () => {
    it('works', () => {
      expect(main()).toBe('hello from hello')
    })
  })
})
"
`;

exports[`node-new add spec files if user added proj-tool jest: file content: /hello/src/index.ts 1`] = `
"export function main() {
  return 'hello from hello'
}

if (require.main === module) {
  console.log(main())
}
"
`;

exports[`node-new add spec files if user added proj-tool jest: file content: /hello/tsconfig.json 1`] = `
"{
  \\"extends\\": \\"@c4605/toolconfs/tsconfig-node\\",
  \\"compilerOptions\\": {
    \\"outDir\\": \\"lib\\"
  },
  \\"exclude\\": [\\"./lib\\"]
}
"
`;

exports[`node-new add spec files if user added proj-tool jest: file structure 1`] = `
Array [
  "/hello/README.md",
  "/hello/package.json",
  "/hello/tsconfig.json",
  "/hello/.gitignore",
  "/hello/.eslintrc.json",
  "/hello/src/index.spec.ts",
  "/hello/src/index.ts",
]
`;

exports[`node-new add spec files if user added proj-tool jest: rule tasks 1`] = `
Array [
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
]
`;

exports[`node-new support \`author\` option: file content: /hello/.eslintrc.json 1`] = `
"{
  \\"extends\\": [
    \\"./node_modules/@c4605/toolconfs/eslintrc.base\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.ts\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.prettier\\"
  ],
  \\"parserOptions\\": {
    \\"project\\": \\"./tsconfig.json\\"
  },
  \\"rules\\": {}
}"
`;

exports[`node-new support \`author\` option: file content: /hello/.gitignore 1`] = `
"# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Editors
# vscode
.vscode
# intelj
.idea
# vim
*.swp
*~
# emacs
\\\\#*\\\\#
.\\\\#*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.*
.envrc
.envrc.*

# parcel-bundler cache (https://parceljs.org/)
.cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# rollup.js default build output
dist/

# Serverless directories
.serverless/

# Temporary folders
tmp/
temp/

# Misc
.DS_*"
`;

exports[`node-new support \`author\` option: file content: /hello/README.md 1`] = `
"# hello

## Usage

\`\`\`bash
yarn build # build code
yarn watch # build and watch code
\`\`\`
"
`;

exports[`node-new support \`author\` option: file content: /hello/package.json 1`] = `
"{
  \\"name\\": \\"hello\\",
  \\"version\\": \\"0.1.0\\",
  \\"main\\": \\"lib/index.js\\",
  \\"author\\": \\"c4605 <bolasblack@gmail.com>\\",
  \\"license\\": \\"MIT\\",
  \\"scripts\\": {
    \\"prepublishOnly\\": \\"yarn build\\",
    \\"build\\": \\"tsc --build .\\",
    \\"watch\\": \\"tsc --watch -p .\\"
  },
  \\"devDependencies\\": {
    \\"prettier\\": \\"^1.0.0\\",
    \\"eslint\\": \\"^1.0.0\\",
    \\"eslint-config-prettier\\": \\"^1.0.0\\",
    \\"@typescript-eslint/parser\\": \\"^1.0.0\\",
    \\"@typescript-eslint/eslint-plugin\\": \\"^1.0.0\\",
    \\"typescript\\": \\"^1.0.0\\",
    \\"@types/node\\": \\"^1.0.0\\"
  },
  \\"dependencies\\": {
    \\"@c4605/toolconfs\\": \\"^1.0.0\\"
  },
  \\"prettier\\": \\"@c4605/toolconfs/prettierrc\\"
}"
`;

exports[`node-new support \`author\` option: file content: /hello/src/index.ts 1`] = `
"export function main() {
  return 'hello from hello'
}

if (require.main === module) {
  console.log(main())
}
"
`;

exports[`node-new support \`author\` option: file content: /hello/tsconfig.json 1`] = `
"{
  \\"extends\\": \\"@c4605/toolconfs/tsconfig-node\\",
  \\"compilerOptions\\": {
    \\"outDir\\": \\"lib\\"
  },
  \\"exclude\\": [\\"./lib\\"]
}
"
`;

exports[`node-new support \`author\` option: file structure 1`] = `
Array [
  "/hello/README.md",
  "/hello/package.json",
  "/hello/tsconfig.json",
  "/hello/.gitignore",
  "/hello/.eslintrc.json",
  "/hello/src/index.ts",
]
`;

exports[`node-new support \`author\` option: rule tasks 1`] = `
Array [
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
]
`;

exports[`node-new works: file content: /hello/.eslintrc.json 1`] = `
"{
  \\"extends\\": [
    \\"./node_modules/@c4605/toolconfs/eslintrc.base\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.ts\\",
    \\"./node_modules/@c4605/toolconfs/eslintrc.prettier\\"
  ],
  \\"parserOptions\\": {
    \\"project\\": \\"./tsconfig.json\\"
  },
  \\"rules\\": {}
}"
`;

exports[`node-new works: file content: /hello/.gitignore 1`] = `
"# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Editors
# vscode
.vscode
# intelj
.idea
# vim
*.swp
*~
# emacs
\\\\#*\\\\#
.\\\\#*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.*
.envrc
.envrc.*

# parcel-bundler cache (https://parceljs.org/)
.cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# rollup.js default build output
dist/

# Serverless directories
.serverless/

# Temporary folders
tmp/
temp/

# Misc
.DS_*"
`;

exports[`node-new works: file content: /hello/README.md 1`] = `
"# hello

## Usage

\`\`\`bash
yarn build # build code
yarn watch # build and watch code
\`\`\`
"
`;

exports[`node-new works: file content: /hello/package.json 1`] = `
"{
  \\"name\\": \\"hello\\",
  \\"version\\": \\"0.1.0\\",
  \\"main\\": \\"lib/index.js\\",
  \\"license\\": \\"MIT\\",
  \\"scripts\\": {
    \\"prepublishOnly\\": \\"yarn build\\",
    \\"build\\": \\"tsc --build .\\",
    \\"watch\\": \\"tsc --watch -p .\\"
  },
  \\"devDependencies\\": {
    \\"prettier\\": \\"^1.0.0\\",
    \\"eslint\\": \\"^1.0.0\\",
    \\"eslint-config-prettier\\": \\"^1.0.0\\",
    \\"@typescript-eslint/parser\\": \\"^1.0.0\\",
    \\"@typescript-eslint/eslint-plugin\\": \\"^1.0.0\\",
    \\"typescript\\": \\"^1.0.0\\",
    \\"@types/node\\": \\"^1.0.0\\"
  },
  \\"dependencies\\": {
    \\"@c4605/toolconfs\\": \\"^1.0.0\\"
  },
  \\"prettier\\": \\"@c4605/toolconfs/prettierrc\\"
}"
`;

exports[`node-new works: file content: /hello/src/index.ts 1`] = `
"export function main() {
  return 'hello from hello'
}

if (require.main === module) {
  console.log(main())
}
"
`;

exports[`node-new works: file content: /hello/tsconfig.json 1`] = `
"{
  \\"extends\\": \\"@c4605/toolconfs/tsconfig-node\\",
  \\"compilerOptions\\": {
    \\"outDir\\": \\"lib\\"
  },
  \\"exclude\\": [\\"./lib\\"]
}
"
`;

exports[`node-new works: file structure 1`] = `
Array [
  "/hello/README.md",
  "/hello/package.json",
  "/hello/tsconfig.json",
  "/hello/.gitignore",
  "/hello/.eslintrc.json",
  "/hello/src/index.ts",
]
`;

exports[`node-new works: rule tasks 1`] = `
Array [
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
  Object {
    "name": "@c4g/shell-exec-task",
    "options": Object {
      "args": Array [],
      "command": "yarn",
      "options": Object {
        "cwd": "hello",
      },
    },
  },
]
`;
